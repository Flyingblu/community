<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.xdea.xmux.forum.mapper.PostExtMapper">
    <resultMap id="BaseResultMap" type="io.xdea.xmux.forum.model.Post">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Mar 14 20:41:03 CST 2022.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="uid" jdbcType="VARCHAR" property="uid"/>
        <result column="forum_id" jdbcType="INTEGER" property="forumId"/>
        <result column="thread_id" jdbcType="INTEGER" property="threadId"/>
        <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
        <result column="ref_post_id" jdbcType="INTEGER" property="refPostId"/>
        <result column="ref_post_uid" jdbcType="VARCHAR" property="refPostUid"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="create_at" jdbcType="TIMESTAMP" property="createAt"/>
        <result column="update_at" jdbcType="TIMESTAMP" property="updateAt"/>
        <result column="likes" jdbcType="INTEGER" property="likes"/>
        <result column="pinned" jdbcType="BIT" property="pinned"/>
    </resultMap>

    <resultMap id="BaseWithInfo" type="io.xdea.xmux.forum.model.PostWithInfo" extends="BaseResultMap">
        <result column="liked" jdbcType="INTEGER" property="liked"/>
        <result column="saved" jdbcType="BIT" property="saved"/>
    </resultMap>

    <select id="selectSaved" resultMap="BaseWithInfo">
        select p.*,
               true            as saved,
               case
                   when l.liked is null then 0
                   when l.liked then 1
                   else -1 end as liked
        from forum.post p
                 inner join forum.saved_post s on p.id = s.post_id and s.uid = #{uid}
                 left join forum.liked_post l on l.post_id = p.id and l.uid = #{uid}
        order by s.id desc
        limit #{limit} offset #{offset}
    </select>

    <select id="selectTree" resultMap="BaseWithInfo">
        with recursive subposts as (
            select *
            from forum.post
            where id = #{startId}
            union
            select p.*
            from forum.post p
                     inner join subposts s on s.parent_id = p.id
        )
        select p.*,
               case
                   when l.liked is null then 0
                   when l.liked then 1
                   else -1 end   as liked,
               case
                   when s.id is null then false
                   else true end as saved
        from subposts p
                 left join forum.saved_post s on s.post_id = p.id and s.uid = #{uid}
                 left join forum.liked_post l on l.post_id = p.id and l.uid = #{uid}
        order by ${orderStr}
        limit #{limit}
    </select>

    <select id="select" resultMap="BaseWithInfo">
        with childposts as (
            select subposts.*
            from forum.post p
                     join lateral (
            select *
            from forum.post sp
            where sp.parent_id = p.id
            order by sp.id asc
            limit 3
        ) subposts
        on true
        where p.thread_id = #{threadId}
          and p.parent_id
         &lt; 1
        order by p.${ordering}
        limit #{count} offset #{offset} )
        select allpost.*,
               case
                   when l.liked is null then 0
                   when l.liked then 1
                   else -1 end   as liked,
               case
                   when s.id is null then false
                   else true end as saved
        from (select *
              from childposts
              union
              (select *
               from forum.post p
               where p.thread_id = #{threadId}
                 and p.parent_id &lt; 1
               order by p.${ordering}
               limit #{count} offset #{offset})) as allpost
                 left join forum.saved_post s on s.post_id = allpost.id and s.uid = #{uid}
                 left join forum.liked_post l
                           on l.post_id = allpost.id and l.uid = #{uid}
    </select>

    <select id="selectByUser" resultMap="BaseWithInfo">
        select p.*,
               case
                   when l.liked is null then 0
                   when l.liked then 1
                   else -1 end   as liked,
               case
                   when s.id is null then false
                   else true end as saved
        from forum.post p
                 left join forum.saved_post s on s.post_id = p.id and s.uid = #{uid}
                 left join forum.liked_post l on l.post_id = p.id and l.uid = #{uid}
        where p.uid = #{uid}
        order by ${ordering}
        limit #{count} offset #{offset}
    </select>

    <update id="changeVote">
        update forum.post
        set "likes" = "likes" + #{amount}
        where id = #{id}
    </update>

    <update id="togglePinned">
        update forum.post
        set pinned = not pinned
        where id = #{id}
    </update>

</mapper>